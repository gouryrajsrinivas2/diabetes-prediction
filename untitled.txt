import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score
#from sklearn import *
dataset=pd.read_csv("/Users/gouryrajsrinivas/Desktop/basicpy/diabetes prediction/diabetes.csv")
print(dataset.head())
dataset.describe()
dataset.hist(figsize=(10, 8))
plt.show()
print((dataset[["Glucose","BloodPressure","SkinThickness","Insulin","BMI"]]==0).sum())
dataset[["Glucose","BloodPressure","SkinThickness","Insulin","BMI"]]=dataset[["Glucose","BloodPressure","SkinThickness","Insulin","BMI"]].replace(0,np.NaN)
print((dataset[["Glucose","BloodPressure","SkinThickness","Insulin","BMI"]]==0).sum())
print (dataset)
print(dataset.isnull().sum())
dataset.fillna(dataset.mean(), inplace=True)
print (dataset)
dataset.describe()
dataset.hist(figsize=(10, 8))
plt.show()
array = dataset.values
X = array[:,0:8]
Y = array[:,8]
test_size = 0.3
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size)
models = []
models.append(('KNN', KNeighborsClassifier()))
models.append(('SVC', SVC()))
models.append(('LR', LogisticRegression()))
models.append(('DT', DecisionTreeClassifier()))
models.append(('GNB', GaussianNB()))
models.append(('RF', RandomForestClassifier()))
models.append(('GB', GradientBoostingClassifier()))
names = []
scores = []
for name, model in models:
    model.fit(X_train, Y_train)
    Y_pred = model.predict(X_test)
    scores.append(accuracy_score(Y_test, Y_pred))
    names.append(name)
tr_split = pd.DataFrame({'Name': names, 'Score': scores})
print(tr_split)
#model = LogisticRegression()
#model.fit(X_train, Y_train)
#result = model.score(X_test, Y_test)
#print( "The predicted accuracy is ",result)